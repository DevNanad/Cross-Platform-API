generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Voters
model User {
  id              String            @id @default(uuid())
  student_id      String            @unique
  password        String
  fullname        String?
  profile_picture String?
  mobile_number   String            @unique
  pin_number      String
  votes           Vote[]
  elections       Electionhistory[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

//Admin who control everything
model Admin {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//Election have many Organizations
model Election {
  id                String           @id @default(uuid())
  title             String
  startDate         DateTime
  endDate           DateTime
  status            Status           @default(upcoming)
  organizations     Organization[]
  electionhistory   Electionhistory? @relation(fields: [electionhistoryId], references: [id])
  electionhistoryId String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

//Status for Election
enum Status {
  upcoming
  ongoing
  ended
}

//Organization have many Ballots
model Organization {
  id         String    @id @default(uuid())
  org_name   String
  logo_url   String?
  startDate  DateTime
  endDate    DateTime
  election   Election? @relation(fields: [electionId], references: [id])
  electionId String?
  ballots    Ballot[]
  votes      Vote[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

//Candidate have many Votes
model Candidate {
  id        String   @id @default(uuid())
  fullname  String
  platform  String
  party     String
  imageUrl  String?
  seat      Seat?    @relation(fields: [seatId], references: [id])
  seatId    String?
  votes     Vote[]
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//Seat will have many Candidates
model Seat {
  id         String      @id @default(uuid())
  position   String
  candidates Candidate[]
  ballot     Ballot?     @relation(fields: [ballotId], references: [id])
  ballotId   String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

//Ballot will have many Seats
model Ballot {
  id             String        @id @default(uuid())
  seats          Seat[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

//Vote is tracked to the voters id
model Vote {
  id             String        @id @default(uuid())
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  candidate      Candidate?    @relation(fields: [candidateId], references: [id])
  candidateId    String?
  voter          User?         @relation(fields: [voterId], references: [student_id])
  voterId        String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([organizationId, voterId, candidateId])
}

model Electionhistory {
  id        String     @id @default(uuid())
  elections Election[]
  voter     User?      @relation(fields: [voterId], references: [id])
  voterId   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}
