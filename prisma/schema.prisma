generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//IDs
model Id {
  id         String   @id @default(uuid())
  student_id String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

//Voters
model User {
  id              String     @id @default(uuid())
  student_id      String     @unique
  password        String
  firstname       String?
  surname         String?
  age             String?
  year_level      String?
  profile_picture String?
  mobile_number   String?    @unique
  email           String?    @unique
  pin_number      String
  role            Role       @default(user)
  refreshToken    String?
  votes           Vote[]
  activities      Activity[]
  elections       Election[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

//Status for Election
enum Role {
  admin
  user
}

//Activity
model Activity {
  id        String   @id @default(uuid())
  type      String
  user      User?    @relation(fields: [userId], references: [student_id])
  userId    String?
  createdAt DateTime @default(now())
}

//Election have many Organizations
model Election {
  id            String         @id @default(uuid())
  banner        String
  title         String
  startDate     DateTime
  endDate       DateTime
  status        Status         @default(upcoming)
  organizations Organization[]
  users         User[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

//Status for Election
enum Status {
  upcoming
  ongoing
  ended
}

//Organization have many Ballots
model Organization {
  id         String    @id @default(uuid())
  org_name   String
  logo_url   String?
  startDate  DateTime
  endDate    DateTime
  election   Election? @relation(fields: [electionId], references: [id])
  electionId String?
  org_status Status    @default(upcoming)
  ballots    Ballot[]
  votes      Vote[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

//Candidate have many Votes
model Candidate {
  id               String   @id @default(uuid())
  fullname         String
  platform         String
  party            String
  imageUrl         String?
  seat             Seat?    @relation(fields: [seatId], references: [id])
  seatId           String?
  votes            Vote[]
  candidate_status Status   @default(upcoming)
  count            Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

//Seat will have many Candidates
model Seat {
  id               String      @id @default(uuid())
  position_order   String?
  position         String
  requiredWinner   String?
  candidates       Candidate[]
  voted_candidates String[]
  position_status  Status      @default(upcoming)
  ballot           Ballot?     @relation(fields: [ballotId], references: [id])
  ballotId         String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

//Ballot will have many Seats
model Ballot {
  id             String        @id @default(uuid())
  seats          Seat[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

//Vote is tracked to the voters id
model Vote {
  id             String        @id @default(uuid())
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  candidate      Candidate?    @relation(fields: [candidateId], references: [id])
  candidateId    String?
  voter          User?         @relation(fields: [voterId], references: [student_id])
  voterId        String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@unique([organizationId, voterId, candidateId])
}
